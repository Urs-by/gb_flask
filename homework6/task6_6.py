# üìå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞.
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ç—Ä–µ—Ö —Ç–∞–±–ª–∏—Ü: —Ç–æ–≤–∞—Ä—ã, –∑–∞–∫–∞–∑—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
# –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä—ã –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö, –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è—Ö –∏ —Ü–µ–Ω–∞—Ö.
# –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –º–∞–≥–∞–∑–∏–Ω–∞.
# –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑—ã –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö, —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
# ‚óã –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–∏ÃÜ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:
# id (PRIMARY KEY), –∏–º—è, —Ñ–∞–º–∏–ª–∏—è, –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–∏ÃÜ –ø–æ—á—Ç—ã –∏ –ø–∞—Ä–æ–ª—å.
# ‚óã –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:
# id (PRIMARY KEY), –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞.
# ‚óã –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:
# id (  PRIMARY KEY), id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (FOREIGN KEY), id —Ç–æ–≤–∞—Ä–∞ (FOREIGN KEY), –¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.

from fastapi import FastAPI
from typing import List
from models import User, Item, Order, UserIn, ItemIn, OrderIn
from database import users_db, items_db, orders_db, database

app = FastAPI()


@app.on_event("startup")
async def startup():
    await database.connect()


@app.on_event("shutdown")
async def shutdown():
    await database.disconnect()


@app.get("/")
async def root():
    return {"message": "Hello hw6_6"}


@app.get("/users/", response_model=List[User])
async def read_users():
    query = users_db.select()
    return await database.fetch_all(query)


@app.get("/users/{user_id}", response_model=User)
async def read_user(user_id: int):
    query = users_db.select().where(users_db.c.id == user_id)
    return await database.fetch_one(query)


@app.post("/users/", response_model=User)
async def create_user(user: UserIn):
    new_user = users_db.insert().values(**user.model_dump())
    new_id = await database.execute(new_user)
    return {**user.model_dump(), 'id': new_id}


@app.put("//users/{user_id}")
async def update_user(user_id: int, new_user: UserIn):
    query = users_db.update().where(users_db.c.id ==
                                    user_id).values(**new_user.model_dump())
    await database.execute(query)
    return {'message': 'User updated'}


@app.delete("/users/{users_id}")
async def delete_user(user_id: int):
    query = users_db.delete().where(users_db.c.id == user_id)
    await database.execute(query)
    return {'message': 'User deleted'}


@app.get("/items/", response_model=List[Item])
async def read_items():
    query = items_db.select()
    return await database.fetch_all(query)


@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: int):
    query = items_db.select().where(items_db.c.id == item_id)
    return await database.fetch_one(query)


@app.post("/items/", response_model=Item)
async def create_item(item: ItemIn):
    new_item = items_db.insert().values(**item.model_dump())
    new_id = await database.execute(new_item)
    return {**item.model_dump(), 'id': new_id}


@app.put("/items/{item_id}")
async def update_item(item_id: int, new_item: ItemIn):
    query = items_db.update().where(items_db.c.id ==
                                    item_id).values(**new_item.model_dump())
    await database.execute(query)
    return {'message': 'Item updated'}


@app.delete("/items/{item_id}")
async def delete_item(item_id: int):
    query = items_db.delete().where(items_db.c.id == item_id)
    await database.execute(query)
    return {'message': 'Item deleted'}


@app.get("/orders/", response_model=List[Order])
async def read_orders():
    query = orders_db.select()
    return await database.fetch_all(query)


@app.get("/orders/{order_id}", response_model=Order)
async def read_order(order_id: int):
    query = orders_db.select().where(orders_db.c.id == order_id)
    return await database.fetch_one(query)


@app.post("/orders/", response_model=Order)
async def create_item(order: OrderIn):
    new_order = orders_db.insert().values(**order.model_dump())
    new_id = await database.execute(new_order)
    return {**order.model_dump(), 'id': new_id}


@app.put("/orders/{order_id}")
async def update_order(order_id: int, new_order: OrderIn):
    query = orders_db.update().where(orders_db.c.id ==
                                     order_id).values(**new_order.model_dump())
    await database.execute(query)
    return {'message': 'Order updated'}


@app.delete("/orders/{order_id}")
async def delete_order(order_id: int):
    query = orders_db.delete().where(orders_db.c.id == order_id)
    await database.execute(query)
    return {'message': 'Order deleted'}
