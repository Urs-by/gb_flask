# –ó–∞–¥–∞–Ω–∏–µ No4
# üìå –ù–∞–ø–∏—à–∏—Ç–µ API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á. –î–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–∏ÃÜ—Ç–µ –º–æ–¥–µ–ª—å Task —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:
# ‚óã id: int (–ø–µ—Ä–≤–∏—á–Ω—ã–∏ÃÜ –∫–ª—é—á)
# ‚óã title: str (–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏)
# ‚óã description: str (–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏)
# ‚óã done: bool (—Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏)
# üìå API –¥–æ–ª–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
# ‚óã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á: GET /tasks/
# ‚óã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–∏ÃÜ –∑–∞–¥–∞—á–µ: GET /tasks/{task_id}/
# ‚óã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–∏ÃÜ –∑–∞–¥–∞—á–∏: POST /tasks/
# ‚óã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ: PUT /tasks/{task_id}/
# ‚óã –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: DELETE /tasks/{task_id}/
# üìå –î–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–∏ÃÜ—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Field –º–æ–¥–µ–ª–∏ Task.
# üìå –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–∏ÃÜ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–∏ÃÜ—Ç–µ SQLAlchemy –∏ –º–æ–¥—É–ª—å databases.


from fastapi import FastAPI
from typing import List
from models import TaskIn, TaskOut
from database import tasks_db, engine, database

app = FastAPI()


@app.on_event("startup")
async def startup():
    await database.connect()


@app.on_event("shutdown")
async def shutdown():
    await database.disconnect()


@app.get("/")
async def root():
    return {"message": "Hello hw6"}


@app.get("/tasks/", response_model=List[TaskOut])
async def read_users():
    query = tasks_db.select()
    return await database.fetch_all(query)


@app.post("/tasks/", response_model=TaskOut)
async def create_task(task: TaskIn):
    new_task = tasks_db.insert().values(**task.model_dump())
    new_id =await database.execute(new_task)
    return {**task.model_dump(), 'id': new_id}


@app.get("/tasks/{task_id}", response_model=TaskOut)
async def read_user(task_id: int):
    query = tasks_db.select().where(tasks_db.c.id == task_id)
    return await database.fetch_one(query)


@app.put("/tasks/{task_id}")
async def update_task(task_id: int, new_task: TaskIn):
    query = tasks_db.update().where(tasks_db.c.id ==
                                    task_id).values(**new_task.model_dump())
    await database.execute(query)
    return {'message': 'Task updated'}


@app.delete("/tasks/{task_id}")
async def delete_task(task_id: int):
    query = tasks_db.delete().where(tasks_db.c.id == task_id)
    await database.execute(query)
    return {'message': 'Task deleted'}